import {
  cleanup,
  fireEvent,
  render,
  wait,
  waitForDomChange
} from '@testing-library/react';
import { createBrowserHistory } from 'history';
import React from 'react';
import { ApolloProvider } from 'react-apollo-hooks';
import ReactDOM from 'react-dom';

import * as queries from '../../graphql/queries';
import { mockApolloClient } from '../../utils/test-helpers';

import ChatList from './ChatList';

describe('ChatList', () => {
  afterEach(() => {
    cleanup();
  });

  it('renders fetched chats data', async () => {
    const client = mockApolloClient([
      {
        request: { query: queries.chats },
        result: {
          data: {
            chats: [
              {
                __typename: 'Chat',
                id: '1',
                name: 'Foo Bar',
                picture: 'https://localhost:4000/picture.jpg',
                lastMessage: {
                  __typename: 'Message',
                  id: '1',
                  content: 'Hello World!',
                  createdAt: new Date('1 Jan 2019 GMT')
                }
              }
            ]
          }
        }
      }
    ]);
    const history = createBrowserHistory();
    {
      const { container, getByTestId } = render(
        <ApolloProvider client={client}>
          <ChatList history={history} />
        </ApolloProvider>
      );
      await waitForDomChange({ container });

      expect(getByTestId('name').textContent).toContain('Foo Bar');
      expect(getByTestId('picture')).toHaveAttribute(
        'src',
        'https://localhost:4000/picture.jpg'
      );
      expect(getByTestId('content').textContent).toContain('Hello World!');
    }
  });

  it('should navigate to the target chat room on chat item click', async () => {
    const client = mockApolloClient([
      {
        request: { query: queries.chats },
        result: {
          data: {
            chats: [
              {
                __typename: 'Chat',
                id: '1',
                name: 'Foo Bar',
                picture: 'https://localhost:4000/picture.jpg',
                lastMessage: {
                  __typename: 'Message',
                  id: '1',
                  content: 'Hello World!',
                  createdAt: new Date('1 Jan 2019 GMT')
                }
              }
            ]
          }
        }
      }
    ]);
    const history = createBrowserHistory();
    {
      const { container, getByTestId } = render(
        <ApolloProvider client={client}>
          <ChatList history={history} />
        </ApolloProvider>
      );
      await waitForDomChange({ container });
      fireEvent.click(getByTestId('chat'));
      await wait(() =>
        expect(getByTestId('chat').textContent).toContain('Foo Bar')
      );
    }
  });
});

// IMPORTANT
// Below is a temporary hack to suppress warnings generated by a React bug.
// Source: https://github.com/testing-library/react-testing-library/issues/281
// @todo: remove this when React 16.9.0 is stable and we upgrade.
const originalError = console.error;
beforeAll(() => {
  console.error = (...args: string[]) => {
    if (/Warning.*not wrapped in act/.test(args[0])) {
      return;
    }
    originalError.call(console, ...args);
  };
});
afterAll(() => {
  console.error = originalError;
});
